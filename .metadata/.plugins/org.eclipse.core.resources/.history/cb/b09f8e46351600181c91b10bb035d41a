
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;

import repositories.RendeRepository;
import domain.Rende;
import domain.User;
import forms.RendeForm;

@Service
@Transactional
public class RendeService {

	// Managed Repository
	@Autowired
	private RendeRepository	rendeRepository;

	// Supporting services
	@Autowired
	private UserService		userService;


	// Constructors

	public RendeService() {
		super();
	}

	// Simple CRUD methods

	public RendeForm create() {
		User principal;
		RendeForm rendeForm;
		
		principal = this.userService.findByPrincipal();
		Assert.notNull(principal);
		rendeForm = new RendeForm();
		rendeForm.setIsDraft(true);
		
		return rendeForm;
	}

	//  An actor who is not authenticated must be able to browse the list of Rendes and display them
	public Collection<Rende> findAll() {
		final Collection<Rende> result = this.rendeRepository.findAll();
		Assert.notNull(result);
		return result;
	}

	// Other business methods
	//Un ADMIN puede eliminar también
	public void delete(final Rende rende) {
		User principal;
		Assert.notNull(rende);
		Assert.isTrue(rende.getId() != 0);

		principal = this.userService.findByPrincipal();
		Assert.notNull(principal);

		Assert.isTrue(this.findByUserId(principal.getId()).contains(rende));
		Assert.isTrue(rende.getIsDraft());
		rende.setIsDeleted(true);

		this.rendeRepository.save(rende);
	}

	// Users must be able to create Rendes
	public Rende save(final Rende rendeToSave) {
		User principal;
		Rende result;
		Collection<Rende> Rendes, updated, rSVPS, updated2;
		Assert.notNull(rendeToSave);

		principal = this.userService.findByPrincipal();

		Assert.notNull(principal);

		if (rendeToSave.getId() == 0) {
			final Collection<User> attendants = new ArrayList<User>();
			attendants.add(principal);
			rendeToSave.setUser(principal);
			rendeToSave.setAttendants(attendants);
		}
		
		rendeToSave.setMoment(new Date(System.currentTimeMillis()-1));

<<<<<<< HEAD
		final Date currentMoment = new Date(System.currentTimeMillis() - 10);
=======
		final Date currentMoment = new Date();
>>>>>>> f8463c12d10ad0783e21b7f4ac30161fc29ec1cf

		Assert.isTrue(rendeToSave.getMoment().before(currentMoment));

		result = this.rendeRepository.save(rendeToSave);

		Rendes = principal.getRendes();
		updated = new ArrayList<Rende>(Rendes);
		updated.add(result);
		principal.setRendes(updated);

		rSVPS = principal.getrSVPS();
		updated2 = new ArrayList<Rende>(rSVPS);
		updated2.add(result);
		principal.setrSVPS(updated2);

		return result;
	}
	public Collection<Rende> findByUserId(final int id) {
		User principal;
		Collection<Rende> result;

		principal = this.userService.findByPrincipal();
		Assert.notNull(principal);
		result = this.rendeRepository.selectByUserId(id);

		Assert.notNull(result);

		return result;

	}

	public Collection<Rende> findRSVPSByUser() {
		User principal;
		Collection<Rende> result;

		principal = this.userService.findByPrincipal();
		Assert.notNull(principal);
		result = principal.getrSVPS();

		Assert.notNull(result);

		return result;

	}

	public Collection<Rende> selectNotAdultRendes() {
		Collection<Rende> result;
		result = this.rendeRepository.selectNotAdultRendes();
		return result;

	}

	public Rende findOne(final int RendeId) {
		Rende result;

		result = this.rendeRepository.findOne(RendeId);
		Assert.notNull(result);

		return result;

	}
	
	public Collection<Rende> selectNotAdultRendes() {
		Collection<Rende> result;
		result = this.rendeRepository.selectNotAdultRendes();
		return result;

	}
	
	//Reconstruct --------------------------------------------
	
	@Autowired
	private Validator validator;
	
	public Rende reconstruct(RendeForm rendeForm, BindingResult binding) {
		Rende result;
		User principal;
		
		principal = this.userService.findByPrincipal();
		
		result = new Rende();
		
		result.setName(rendeForm.getName());
		result.setDescription(rendeForm.getDescription());
		result.setPicture(rendeForm.getPicture());
		result.setCoordenates(rendeForm.getCoordenates());
		result.setAttendants(rendeForm.getAttendants());
		result.setIsDraft(rendeForm.getIsDraft());
		result.setAdultOnly(rendeForm.getAdultOnly());
		result.setLinked(rendeForm.getLinked());
		result.setIsDraft(rendeForm.getIsDraft());	
		result.setIsDeleted(false);	
		result.setUser(principal);
		
		validator.validate(result, binding);
		return result;
	}

}
