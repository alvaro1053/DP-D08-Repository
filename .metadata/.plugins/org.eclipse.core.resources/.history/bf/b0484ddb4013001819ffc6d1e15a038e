package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import domain.Admin;
import domain.Comment;
import domain.Rende;
import domain.ReplyComment;
import domain.ReplyQuestion;
import domain.User;


import repositories.CommentRepository;



@Service
@Transactional
public class CommentService {
	
	// Managed Repository
	@Autowired
	private CommentRepository	commentRepository;
	
	// Managed services
	@Autowired
	private UserService		userService;

	@Autowired
	private AdminService		adminService;
	
	
	//Constructor
	public CommentService(){
		super();
	}
	
	public Comment create(){
		User principal;
		Comment comment;
		Date moment;
		final Collection<ReplyComment> repliesComments = new ArrayList<ReplyComment>();

		
		moment = new Date(System.currentTimeMillis() - 1);
		
		
		principal = this.userService.findByPrincipal();
		Assert.notNull(principal);
		
		comment = new Comment();
		
		comment.setUser(principal);
		comment.setMoment(moment);
		comment.setRepliesComments(repliesComments);
		
		return comment;
	}
	
	public Comment save(final Comment comment){
		User principal;
		Date moment;
		Comment result;
		Rende rende;
		Collection<Comment> comments, updated;
		
		
		moment = new Date(System.currentTimeMillis() - 1);
		
		
		Assert.notNull(comment);
		
		
		principal = this.userService.findByPrincipal();
		Assert.notNull(principal);
		
		comment.setMoment(moment);
		comment.setUser(principal);
		
		result = this.commentRepository.save(comment);
		
		
		//Actualizar relaciones
		comments = principal.getComments();
		updated = new ArrayList<Comment>(comments);
		updated.add(comment);
		principal.setComments(updated);
		
		rende = comment.getRende();
		comments = rende.getComments();
		updated = new ArrayList<Comment>(comments);
		updated.add(comment);
		rende.setComments(updated);
		
		
		return result;
	}
	
	public void delete(final Comment comment){
		Admin principal;
		User user;
		Rende rende;
		Collection<Comment> comments, updated;
		
		principal = this.adminService.findByPrincipal();
		Assert.notNull(principal);
		
		
		//Eliminar relaciones
		user = comment.getUser();
		comments = user.getComments();
		updated = new ArrayList<Comment>(comments);
		updated.remove(comment);
		user.setComments(comments);
		
		rende = comment.getRende();
		comments = rende.getComments();
		updated = new ArrayList<Comment>(comments);
		updated.remove(comment);
		rende.setComments(comments);
		
		this.commentRepository.delete(comment);
		
	}

}
