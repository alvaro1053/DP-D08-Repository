
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.QuestionRepository;
import domain.Actor;
import domain.Admin;
import domain.Question;
import domain.Rende;
import domain.ReplyQuestion;
import domain.User;

@Service
@Transactional
public class QuestionService {

	// Managed Repository
	@Autowired
	private QuestionRepository		questionRepository;

	// Supporting Repository
	@Autowired
	private UserService				userService;

	@Autowired
	private ActorService			actorService;

	@Autowired
	private ReplyQuestionService	replyQuestionService;


	// Constructors
	public QuestionService() {
		super();
	}

	// Simple CRUD methods
	public Question create() {
		User principal;
		Question question;
		final Collection<ReplyQuestion> repliesQuestions = new ArrayList<ReplyQuestion>();
		principal = this.userService.findByPrincipal();
		Assert.notNull(principal);

		question = new Question();
		question.setReplyQuestions(repliesQuestions);

		return question;
	}

	public Question save(final Question question) {
		User principal;
		Question result;

		Assert.notNull(question);

		principal = this.userService.findByPrincipal();

		Assert.notNull(principal);

		result = this.questionRepository.save(question);

		return result;
	}

	public void delete(final Question question) {
		Assert.notNull(question);
		List<Question> updated;

		for (final ReplyQuestion rc : question.getReplyQuestions())
			this.replyQuestionService.delete(rc);

		final Rende rende = question.getRende();
		final List<Question> questions = rende.getQuestions();
		updated = new ArrayList<Question>(questions);
		updated.remove(question);
		rende.setQuestions(updated);

		this.questionRepository.delete(question);
	}
	public Collection<Question> SelectRepliedByUserId(final int id) {
		final User principal = this.userService.findByPrincipal();
		Assert.notNull(principal);
		final Collection<Question> res = this.questionRepository.repliedByUserId(id);
		return res;
	}

	public Question findOne(final int id) {
		final User principalUser = (User) this.actorService.findByPrincipal();
		final Actor principalAdmin = this.actorService.findByPrincipal();
		final Question res = this.questionRepository.findOne(id);

		Assert.isTrue(principalUser.getRendes().contains(res) || principalAdmin instanceof Admin);

		return res;
	}
}
