
package controllers.manager;

import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.ManagerService;
import services.TripService;
import services.WarnoteService;
import controllers.AbstractController;
import domain.Manager;
import domain.Trip;
import domain.Warnote;

@Controller
@RequestMapping("/warnote/manager")
public class WarnoteManagerController extends AbstractController {

	// Services

	@Autowired
	private WarnoteService	warnoteService;

	@Autowired
	private ManagerService	managerService;

	@Autowired
	private TripService		tripService;


	// Constructors

	public WarnoteManagerController() {
		super();
	}

	// Listing

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public ModelAndView list() {
		ModelAndView result;
		Collection<Warnote> warnotes;

		warnotes = this.warnoteService.findByManager();
		result = new ModelAndView("warnote/list");
		result.addObject("warnotes", warnotes);
		result.addObject("requestURI", "warnote/manager/list.do");

		return result;
	}

	// Creation 
	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create() {
		ModelAndView result;
		Warnote warnote;
		final Collection<Trip> trips;

		//Añadir this.managerService.findByPrincipal();
		warnote = this.warnoteService.create();
		trips = this.tripService.findAllPublishedTrips();

		result = new ModelAndView("warnote/edit");
		result.addObject("warnote", warnote);
		result.addObject("trips", trips);

		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid final Warnote warnote, final BindingResult binding) {
		ModelAndView result;

		if (binding.hasErrors())
			result = this.createEditModelAndView(warnote);
		else
			try {
				this.warnoteService.save(warnote);
				result = new ModelAndView("redirect:list.do");
			} catch (final Throwable oops) {
				result = this.createEditModelAndView(warnote, "warnote.commit.error");
			}

		return result;
	}

	// Edition

	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam final int warnoteId) {
		ModelAndView result;
		Warnote warnote;
		String message;
		
		message = "warnote.commit.error";
		
		warnote = this.warnoteService.findOne(warnoteId);
		Assert.notNull(warnote);

		try {
			Assert.isTrue(this.managerService.findByPrincipal() == warnote.getManager());
			result = this.createEditModelAndView(warnote);
		} catch (final Throwable oops) {
			result = new ModelAndView("redirect:list.do");
			result.addObject("message", message);
		}

		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "delete")
	public ModelAndView delete(@Valid final Warnote warnote, final BindingResult binding) {
		ModelAndView result;

		if (binding.hasErrors())
			result = this.createEditModelAndView(warnote);
		else
			try {
				this.warnoteService.delete(warnote);
				result = new ModelAndView("redirect:list.do");
			} catch (final Throwable oops) {
				result = this.createEditModelAndView(warnote, "warnote.commit.error");
			}

		return result;
	}

	// Ancillary methods ------------------------------------------------------

	protected ModelAndView createEditModelAndView(final Warnote warnote) {
		ModelAndView result;

		result = this.createEditModelAndView(warnote, null);

		return result;
	}

	protected ModelAndView createEditModelAndView(final Warnote warnote, final String message) {
		final ModelAndView result;
		Boolean permission;
		Manager principal;
		final Collection<Trip> trips;

		principal = this.managerService.findByPrincipal();

		trips = this.tripService.findAllPublishedTrips();

		permission = warnote.getManager().getId() == principal.getId();
		result = new ModelAndView("warnote/edit");
		result.addObject("warnote", warnote);
		result.addObject("permission", permission);
		result.addObject("message", message);
		result.addObject("trips", trips);
		return result;
	}
}
